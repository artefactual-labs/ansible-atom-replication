---
# tasks file for atom-replication-role

- name: "Email notification: Define playbook status"
  set_fact:
    _playbook_status: "ERROR"
  notify: "send notification email"
  changed_when: True
  tags: "always" # inocuous to use always here
  when:
    - ansible_env.ANSIBLE_LOG_PATH is defined
    - inventory_hostname == atom_replication_ansible_remote_server|string
    - atom_replication_email_notification_enabled|bool

- name: "Load OS-specific vars"
  include_vars: "{{ ansible_os_family }}.yml"
  tags:
    - "always" # inocuous to use always here

## Configure ansible virtualenv, ssh connections and replication script in remote server
#  The best server to install the replication script is the edit nginx host.
- import_tasks: "install-replication-remote-server.yml"
  run_once: true
  when:
    - inventory_hostname == atom_replication_ansible_remote_server|string
  tags:
    - "never"
    - "install-replication"

## Elasticsearch configure repo to take snapshots on ES servers
- import_tasks: "configure-es-backup.yml"
  when: >
    inventory_hostname == atom_replication_edit_es_host|string or
    inventory_hostname == atom_replication_ro_es_host|string
  tags:
    - "never"
    - "install-replication"
    - "configure-es-backup"

## Stop nginx service in AtoM read-only host
- name: "Stop nginx server on AtoM read-only host"
  become: "yes"
  service:
    name: "nginx"
    state: "stopped"
  notify:
    - "restart nginx"
  when:
    - inventory_hostname == atom_replication_ro_atom_host|string
    - atom_replication_nginx_stop_service|bool
  tags:
    - "es-clone-index"
    - "es-ro-restore"
    - "mysql-restore-backup"

## Wait for 1 minute after stopping nginx (to avoid bots opening the ES index)
- name: "Wait for 1 minute after stopping nginx"
  become: "yes"
  wait_for:
    timeout: 60
  when:
    - inventory_hostname == atom_replication_ro_atom_host | string
    - atom_replication_nginx_stop_service|bool
  tags:
    - "es-clone-index"
    - "es-ro-restore"
    - "mysql-restore-backup"

## Elasticsearch backup tasks
- import_tasks: "es-backup.yml"
  when:
    - inventory_hostname == atom_replication_edit_es_host|string
    - atom_replication_edit_es_host|string != atom_replication_ro_es_host|string
  tags:
    - "es-ro-backup"

## End Elasticsearch backup tasks

## MySQL backup tasks

# To take ro backups of some tables: (atom_replication_ro_backup_tables)
- import_tasks: "mysql-ro-backup-tables.yml"
  when:
    - inventory_hostname == atom_replication_ro_mysql_host|string
  tags:
    - "mysql-ro-backup"

- import_tasks: "mysql-edit-backup.yml"
  when:
    - inventory_hostname == atom_replication_edit_mysql_host|string 
    - atom_replication_edit_mysql_host|string != atom_replication_ro_mysql_host|string
  tags:
    - "mysql-edit-backup"

## End MySQL backup tasks

## Restore database and ES index in read-only server

- import_tasks: "abort-replication.yml"
  when:
    - "ansible_play_batch | length != ansible_play_hosts_all | length"
  throttle: 1
  tags:
    - "always"

# When edit and ro indices in the same ES server --> just clone indices
- import_tasks: "es-clone-index.yml"
  when:
    - inventory_hostname == atom_replication_edit_es_host|string
    - atom_replication_edit_es_host|string == atom_replication_ro_es_host|string
    - not atom_replication_es_multiple_indices|bool
  tags:
    - "es-clone-index"
    - "es-ro-restore"

- import_tasks: "es-clone-index-multiple.yml"
  when:
    - inventory_hostname == atom_replication_edit_es_host|string
    - atom_replication_edit_es_host|string == atom_replication_ro_es_host|string
    - atom_replication_es_multiple_indices|bool
  tags:
    - "es-clone-index"
    - "es-ro-restore"

# When edit and ro indices in different ES servers
- import_tasks: "es-restore-backup.yml"
  when:
    - inventory_hostname == atom_replication_ro_es_host|string
    - atom_replication_edit_es_host|string != atom_replication_ro_es_host|string
  tags:
    - "es-ro-restore"

# When edit and ro databases in the same MySQL server
- import_tasks: "mysql-db-copy.yml"
  when:
    - inventory_hostname == atom_replication_edit_mysql_host|string
    - atom_replication_edit_mysql_host|string == atom_replication_ro_mysql_host|string
  tags:
    - "mysql-restore-backup"

# When edit and ro databases in different MySQL servers
- import_tasks: "mysql-restore-backup.yml"
  when:
    - inventory_hostname == atom_replication_ro_mysql_host|string
    - atom_replication_edit_mysql_host|string != atom_replication_ro_mysql_host|string
  tags:
    - "mysql-restore-backup"

## End Restore database and ES index in read-only server

- import_tasks: "abort-replication.yml"
  when:
    - "ansible_play_batch | length != ansible_play_hosts_all | length"
  throttle: 1
  tags:
    - "always"

## Synchronize AtoM uploads and downloads

- import_tasks: "atom-sync-uploads-downloads.yml"
  when:
    - inventory_hostname == atom_replication_edit_atom_host|string
    - atom_replication_synchronize_uploads_dir|bool or atom_replication_synchronize_downloads_dir|bool
  tags:
    - "atom-sync-upload-downloads"

## Replication Post Actions

- import_tasks: "atom-restore-sitetitle.yml"
  when:
    - atom_replication_restore_sitetitle|bool
    # host limitation conditional in playbook tasks
  tags:
    - "atom-restore-sitetitle"

- import_tasks: "atom-sync-baseurl.yml"
  when:
    - atom_replication_synchronize_baseurl|bool
    # host limitation conditional in playbook tasks
  tags:
    - "atom-sync-baseurl"

- import_tasks: "atom-sync-clipboard.yml"
  when:
    - inventory_hostname == atom_replication_ro_mysql_host|string
    - atom_replication_synchronize_clipboard|bool
  tags:
    - "atom-sync-clipboard"

- import_tasks: "atom-delete-clipboard-obsolete-items.yml"
  when:
    - atom_replication_clipboard_delete_obsolete_items|bool
    - inventory_hostname == atom_replication_ro_mysql_host|string
  tags:
    - "atom-clipboard-delete-obsolete-items"

- import_tasks: "atom-ro-restart-services-and-symfony-commands.yml"
  when:
    - inventory_hostname == atom_replication_ro_atom_host|string
  tags:
    - "atom-ro-restart-services-and-symfony-commands"

## Configure cron task
- import_tasks: "cron.yml"
  when:
    - inventory_hostname == atom_replication_ansible_remote_server|string 
  tags:
    - "cron"
    - "install-replication"

## Start nginx service in AtoM edit host
- name: "Start nginx server on AtoM edit host"
  become: "yes"
  service:
    name: "nginx"
    state: "started"
  when:
    - inventory_hostname == atom_replication_edit_atom_host|string
    - atom_replication_nginx_stop_service|bool

## Set playbook status for email notification
- name: "Email notification: Set playbook status as SUCCESS"
  set_fact:
    _playbook_status: "SUCCESS"
  tags: "always" # inocuous to use always here
  when:
    - ansible_env.ANSIBLE_LOG_PATH is defined
    - inventory_hostname == atom_replication_ansible_remote_server|string
    - ansible_play_batch | length == ansible_play_hosts_all | length
    - atom_replication_email_notification_enabled|bool
